Описание реализованных функций:



get_window(img)  # возвращает 3 изображения и координаты рамки:
1) ['img_canny']   граница с Canny (предобработка)
2) ['img_box']    выделенная рамка микросхемы
3) ['img_cutted']   вырезанная микросхема
4) ['points']   координаты рамки


find_differences1(etalon, test)  # возвращает 3 изображения и корреляцию изображений:
1) ['img_diff']   абсолютная разница между исходными изображениями. Получается путем вычисления абсолютной разницы между значениями пикселей в двух изображениях.
2) ['img_diff_erode']   изображение абсолютных различий с применением операции Erode (эрозия). Удаляет шумы или области с низкими значениями различий (проходится круглым или квадратным ядром). Само ядро стоит подбирать (можно сделать настраеваевым параметром для пользователя). (3,3) работает лучше всего
3) ['img_diff_dilate']   изображение абсолютных различий с применением операции Dilated (дилатация). Применяется для  увеличения размера белых (присутствующих) областей в бинарном изображении, чтобы выделить различия и сделать их более заметными (полезно, если важными являются мелкие различия).
4) ['correlation'] корреляция между изображениями с помощью matchTemplate()


find_differences2(etalon, test)  # возвращает 4 изображения с применением БИНАРИЗАЦИИ и SSIM:
1) ['img_ssim']   карта SSIM (разница между изображениями). На карте SSIM можно обнаружить области, где изображения сильно различаются.
2) ['img_thresh']   граница с помощью метода threshhold + OTSU для выбора порога для изображения img_ssim
3) ['img_diff_erode']   изображение абсолютных различий с применением операции Erode (эрозия). Удаляет шумы или области с низкими значениями различий (проходится круглым или квадратным ядром). Само ядро стоит подбирать (можно сделать настраеваевым параметром для пользователя). (3,3) работает лучше всего
4) ['img_diff_dilate']  изображение абсолютных различий с применением операции Dilated (дилатация). Применяется для  увеличения размера белых (присутствующих) областей в бинарном изображении, чтобы выделить различия и сделать их более заметными (полезно, если важными являются мелкие различия).
5) ['score']    индекс структурного сходства (SSIM) между двумя изображениями. Получим число от -1 до 1, где 1 - идеальное сходство.


update_image_by_etalon(etalon,test)  # возвращает 3 изображения:
1) ['img_box']   выделенная рамка микросхемы
2) ['img_matches']   выделенные признаки изображения с помощью SIFT (поиск ключевых точек)
3) ['img_cutted']   дескриптор изображения. Дескриптор описывает окружающую область каждой ключевой точки. Это описание в дальнешем сравнивается. Используется гомографическая матрица



test.shape[::-1] - кортеж, представляющий размеры целевого изображения
cv2.resize(etalon, test.shape[::-1]) - возвращает изображение etalon с новыми размерами

sift.detectAndCompute(img,None) - возвращает координаты ключевых точек (keypoints) и их описание (descriptors)
FLANN_INDEX_KDTREE - алгоритм FLANN для сопоставления ключевых точек.
cv2.FlannBasedMatcher - результатом является список matches, содержащий для каждой точки из первого набора два ближайших соседа из второго набора.
cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0) - использует два набора ключевых точек (первое и второе изображения). Возвращает гомографическую матрицу имаску, указывающую, какие сопоставления используются, а какие - нет.
cv2.drawMatches() - предназначенна для визуализации результатов сопоставления ключевых точек между двумя изображениями
